{"version":3,"sources":["ModalContext.jsx","components/Card/Card.jsx","api/api.js","components/Cards/Cards.jsx","components/BuyCheepest/BuyCheepest.jsx","components/Form/Form.jsx","components/ModalOverlay/ModalOverlay.jsx","App.js","reportWebVitals.js","index.js"],"names":["ModalContext","React","createContext","visibility","toggleModal","Card","product","id","useContext","category","name","price","className","onClick","getProducts","a","fetch","request","json","console","error","Cards","useState","products","setProducts","useEffect","productsFromServer","log","map","index","BuyCheepest","type","Form","currentProduct","setProduct","currentAmount","setAmount","action","onSubmit","event","good","amount","preventDefault","trim","placeholder","autoComplete","value","onChange","target","min","ModalOverlay","App","isVisibleModal","setModalVisibility","Provider","ReactDOM","createPortal","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.529c190c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ModalContext = React.createContext({\n  visibility: false,\n  toggleModal: () => {},\n});\n","import React, { useContext } from 'react';\nimport './Card.scss';\n\nimport { ModalContext } from '../../ModalContext';\n\nexport const Card = ({ product, id }) => {\n  const { toggleModal } = useContext(ModalContext);\n\n  const { category, name, price } = product;\n\n  return (\n    <div className=\"Card\">\n      <h3 className=\"Card__category\">\n        {category}\n      </h3>\n      <h2 className=\"Card__title\">\n        {name}\n      </h2>\n\n      <div className=\"Card__additional\">\n        <p className=\"Card__price\">\n          <span className=\"Card__currency\">$</span>\n          <strong className=\"Card__price-value\">{price}</strong>\n        </p>\n        <button\n          className=\"Card__button\"\n          onClick={toggleModal}\n        >\n          Buy\n        </button>\n      </div>\n    </div>\n  )\n}\n","const URL = `https://run.mocky.io/v3/b7d36eea-0b3f-414a-ba44-711b5f5e528e`;\n\nexport const getProducts = async () => {\n  try {\n    const request = await fetch(URL);\n    \n    return await request.json();\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport './Cards.scss';\n\nimport { Card } from '../Card/Card';\nimport { getProducts } from '../../api/api';\n\nexport const Cards = () => {\n  const [ products, setProducts ] = useState([]);\n\n  useEffect( async() => {\n    const productsFromServer = await getProducts();\n\n    console.log(productsFromServer);\n    setProducts(productsFromServer);\n  }, []);\n\n  return (\n    <section className=\"Cards\">\n      {\n        products.map((product, index) => (\n          <Card\n            // there are no ids :((\n            key={index}\n            product={product}\n          />\n        ))\n      }\n    </section>\n  )\n}\n","import React, { useContext } from 'react';\nimport { ModalContext } from '../../ModalContext';\nimport './BuyCheepest.scss';\n\nexport const BuyCheepest = () => {\n  const { toggleModal } = useContext(ModalContext);\n\n  return (\n    <button\n      className=\"BuyCheepest\"\n      type=\"button\"\n      onClick={toggleModal}\n    >\n      Buy Cheepest\n    </button>\n  )\n}","import React, { useState } from 'react';\nimport './Form.scss';\n\nexport const Form = () => {\n  const [ currentProduct, setProduct ] = useState('');\n  const [ currentAmount, setAmount ] = useState(1);\n\n  const [ isEmpty, setEmptyState ] = useState(true);\n  const [ error, setError ] = useState('');\n\n  const sendData = (good, amount) => {\n    if (!good.trim()) {\n      return;\n    }\n    \n    console.log(good, amount);\n  }\n\n  return (\n    <form\n      action=\"\"\n      className=\"Form\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        sendData(currentProduct, currentAmount);\n        setProduct('');\n        setAmount(1);\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"product\"\n        placeholder=\"Name\"\n        autoComplete=\"off\"\n        value={currentProduct}\n        className=\"Form__input\"\n        onChange={event => setProduct(event.target.value)}\n      />\n\n      <p className=\"Form__error\">\n        {error}\n      </p>\n\n      <input\n        type=\"number\"\n        name=\"product\"\n        placeholder=\"Name\"\n        autoComplete=\"off\"\n        value={currentAmount}\n        className=\"Form__input\"\n        min=\"1\"\n        onChange={event => {\n          if (+currentAmount < 1) {\n            setAmount(1);\n            return;\n          }\n          setAmount(event.target.value);\n        }}\n      />\n\n      <p className=\"Form__error\">\n        {error}\n      </p>\n\n      <button\n        className=\"Form__button\"\n        type=\"submit\"\n      >\n        Order\n      </button>\n    </form>\n  )\n}\n","import React, { useContext } from 'react';\nimport './ModalOverlay.scss';\n\nimport { Form } from '../Form/Form';\nimport { ModalContext } from '../../ModalContext';\n\nexport const ModalOverlay = () => {\n  const { toggleModal } = useContext(ModalContext);\n\n  return (\n    <div className=\"ModalOverlay\">\n      <div className=\"ModalOverlay__content\">\n        <button\n          className=\"ModalOverlay__close\"\n          onClick={toggleModal}\n        ></button>\n\n        <h3 className=\"ModalOverlay__category\">\n          category\n        </h3>\n          \n        <h2 className=\"ModalOverlay__name\">\n          product\n        </h2>\n\n        <p className=\"ModalOverlay__price\">\n          <span className=\"ModalOverlay__currency\">$</span>\n          <strong className=\"ModalOverlay__value\">\n            1000\n          </strong>\n        </p>\n\n        <Form />\n      </div>\n    </div>\n  )\n}\n\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport './styles/utils.scss';\nimport ReactDOM from 'react-dom';\nimport { Cards } from './components/Cards/Cards';\nimport { BuyCheepest } from './components/BuyCheepest/BuyCheepest';\nimport { ModalOverlay } from './components/ModalOverlay/ModalOverlay';\nimport { ModalContext } from './ModalContext';\n\nfunction App() {\n  const [ isVisibleModal, setModalVisibility ] = useState(false);\n\n  const toggleModal = () => {\n    setModalVisibility(!isVisibleModal);\n  }\n\n  return (\n    <ModalContext.Provider value={{isVisibleModal, toggleModal}}>\n      <main className=\"App\">\n        <Cards />\n        <BuyCheepest />\n      </main>\n\n      <div>\n        {isVisibleModal && \n          ReactDOM.createPortal(\n            <ModalOverlay />,\n            document.getElementById('portal')\n          )\n        }\n      </div>\n    </ModalContext.Provider>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}